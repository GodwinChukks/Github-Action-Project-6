name: CI Workflow

on: [push, pull_request]

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm test

  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webapp
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install
      - run: npm run build

  docker-build-push:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push API image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-api ./api
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-api

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-webapp ./webapp
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-webapp

  deploy-to-ec2:
    needs: [docker-build-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Copy files to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}"             -r ./api ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/ecommerce-api
          scp -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}"             -r ./webapp ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/ecommerce-webapp

      - name: SSH and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i "${{ secrets.EC2_SSH_KEY }}" ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            cd ecommerce-api
            docker build -t ecommerce-api .
            docker run -d -p 3000:3000 --name ecommerce-api ecommerce-api

            cd ../ecommerce-webapp
            docker build -t ecommerce-webapp .
            docker run -d -p 3001:3000 --name ecommerce-webapp ecommerce-webapp
          EOF
