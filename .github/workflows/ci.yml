# This is a full CI/CD pipeline for a React + Node.js e-commerce app.
# It builds, tests, dockerizes, and deploys to an EC2 instance.

name: CI/CD Pipeline for E-Commerce Project

on:
  push:
    branches:
      - main  # Triggers on push to main branch
  pull_request:

jobs:
  # ----------------------------------------
  # BACKEND BUILD & TEST JOB
  # ----------------------------------------
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api  # All steps run from ./api directory
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: npm install

      - name: Run backend tests
        run: npm test

  # ----------------------------------------
  # FRONTEND BUILD JOB
  # ----------------------------------------
  build-frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./webapp  # All steps run from ./webapp directory
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install

      - name: Build frontend for production
        run: npm run build

  # ----------------------------------------
  # DOCKER BUILD & PUSH TO DOCKERHUB
  # ----------------------------------------
  docker-build-push:
    needs: [build-backend, build-frontend]  # Waits for backend and frontend to finish
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and push backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-api ./api
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-api

      - name: Build and push frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/ecommerce-webapp ./webapp
          docker push ${{ secrets.DOCKER_USERNAME }}/ecommerce-webapp

  # ----------------------------------------
  # DEPLOY TO AWS EC2
  # ----------------------------------------
  deploy-to-ec2:
    needs: docker-build-push  # Waits for Docker images to be pushed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Save SSH private key from GitHub Secret into a file
      - name: Save EC2 private key to file
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem  # Secure the key file

      # Copy backend and frontend directories to EC2 via SCP
      - name: Copy files to EC2 instance
        run: |
          scp -o StrictHostKeyChecking=no -i key.pem -r ./api ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/ecommerce-api
          scp -o StrictHostKeyChecking=no -i key.pem -r ./webapp ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/ecommerce-webapp

      # SSH into EC2 and build/run containers
      - name: SSH into EC2 and deploy containers
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # Remove existing containers if they exist
            sudo docker rm -f ecommerce-api || true
            sudo docker rm -f ecommerce-webapp || true

            # Backend build and deploy
            cd ecommerce-api
            sudo docker build -t ecommerce-api .
            sudo docker run -d -p 3000:3000 --name ecommerce-api ecommerce-api

            # Frontend build and deploy
            cd ../ecommerce-webapp
            sudo docker build -t ecommerce-webapp .
            sudo docker run -d -p 3001:3000 --name ecommerce-webapp ecommerce-webapp
          EOF

      # Clean up the key file after use
      - name: Clean up private key file
        run: rm -f key.pem
